1.Has Return + Parameter:A function with a return type and one or more parameters that take input and return a value.
Example:
#include<stdio.h>
int sum(int a, int b)
{
   int s=a+b;
   return s;
}

int main()
{
   int a = 5, b =6;
   int result = sum(a,b);
   printf("%d\n",result);
   return 0;
}

2.Has Return + No Parameter:A function with a return type but no parameter.
Example:
#include<stdio.h>
int digit()
{
   int n;
   scanf("%d", &n);
   return n;
}

int main()
{
   int a=digit();
   printf("%d\n", a);
   return 0;
}

3.No Return + Parameter:A function with no return type but one or more parameters.
Example:
#include<stdio.h>
void printMulti(int a, int b)
{
   int multi =a*b;
   printf("%d\n",multi);
}

int main()
{
   int x,y;
   scanf("%d %d",&x,&y);
   printMulti(x,y);
   return 0;
}

4.No Return + No Parameter:A function with no return type and no parameter.
Example:
#include <stdio.h>
void print()
{
   printf("Phitron\n");
}

int main()
{
   print();
   return 0;
}



pass by value:Pass by value means that the function receives a copy of the value of the argument passed to it, and any changes made to the parameter inside the function do not affect the original value of the argument outside the function.
Example:
#include <stdio.h>
void swap(int x,int y)
{
   int temp = x;
   x = y;
   y = temp;
}

int main()
{
   int a= 1,b= 2;
   swap(a,b);
   printf("a=%d\nb=%d\n",a,b);
   return 0;
}

pass by reference:Pass by reference means that the function receives the memory address of the argument passed to it, and any changes made to the parameter inside the function affect the original value of the argument outside the function.
Example:
#include<stdio.h>
void swapping(int*a,int*b)
{
   int temp = *a;
   *a = *b;
   *b = temp;
}

int main()
{
   int x =50,y =60;
   printf("Before swapping two values,x = %d and y = %d\n",x,y);
   swapping(&x, &y);
   printf("After swapping two values, x = %d and y = %d\n", x, y);
   return 0;
}






